version: "3.5"

services:
  janusgraph:
    image: catapult/janusgraph:latest
    build:
      context: ""
      dockerfile: dockerfile-janus.yaml
    container_name: catapult-janusgraph
    #For debugging override entrypoint, will leave container running such that you can bash into it with
    #   docker exec -it catapult-janusgraph /bin/bash
    #To start it up then just execute '. /usr/local/bin/docker-entrypoint.sh janusgraph &' from the /opt/janusgraph/ directory within the container
    #Should posibly comment out healthcheck section if using this as well
    #entrypoint: ["tail", "-f", "/dev/null"]
    environment:
      JAVA_OPTIONS: "-Xms1000m -Xmx4096m -javaagent:/opt/janusgraph/lib/jamm-0.3.0.jar -Dgremlin.io.kryoShimService=org.janusgraph.hadoop.serialize.JanusGraphKryoShimService"
    ports:
      - "8182:8182"
    volumes:
      # volumes and bind mounts for data, logs, io
      - "jgvolume:/var/lib/janusgraph"
      # TO avoid permissions issues run container/janusgraph/gremlin-server.sh as root modify entry script to not step down
      - "/home/catapult/merge-shared-folder:/opt/janusgraph/merge-shared-folder"
      - "./log/janusgraph:/opt/janusgraph/log"
    networks:
      - catapult-network
    healthcheck:
      test: ["CMD", "bin/gremlin.sh", "-e", "scripts/remote-connect.groovy"]
      interval: 10s
      timeout: 30s
      retries: 3
    depends_on:
      - scylla
      - elasticsearch


  scylla:
    image: scylladb/scylla:2.2.0
    container_name: catapult-scylla
    ports:
     # http://docs.scylladb.com/kb/posix/ REST API
     - "10000:10000"
     # CQL ports (native_transport_port)
     - "9042:9042"
     # Thrift (rpc_port)
     - "9160:9160"
     # Internode
     - "7000:7000"
     - "7001:7001"
     # JMX
     - "7199:7199"
     # Prometheus monitoring
     - "9180:9180"
     - "9100:9100"
    volumes:
     - "scyvolume:/var/lib/scylla"
    networks:
      - catapult-network


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.6.0
    container_name: catapult-elastic
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.host=0.0.0.0"
      - "network.host=0.0.0.0"
      - "transport.host=127.0.0.1"
      - "cluster.name=docker-cluster"
      - "xpack.security.enabled=false"
      - "discovery.zen.minimum_master_nodes=1"
    volumes:
      - "elsvolume:/usr/share/elasticsearch/data"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - catapult-network


networks:
  catapult-network: 
    external: true

volumes:
  # Best to use a managed named volumes here users should not need to interact with these on host
  # Note these will be call deatails_*
  jgvolume:
  elsvolume:
  scyvolume:
